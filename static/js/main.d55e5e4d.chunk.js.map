{"version":3,"sources":["state/surveyContext.js","components/ProgressBar/ProgressBar.js","components/AppLayout/AppLayout.js","services/api.js","hooks/useFetch.js","components/SurveyCard/SurveyCard.js","pages/Home/Home.js","components/Question/Question.js","pages/Survey/Survey.js","hooks/useSurveySubmit.js","components/ResultCard/ResultCard.js","pages/Result/Result.js","App.js","hooks/useSurveyContext.js","serviceWorker.js","index.js"],"names":["surveyContext","createContext","ProgressBar","currentStep","totalQuestion","progress","className","percent","parseInt","AppLayout","children","useState","setProgress","React","useContext","surveyState","inProgress","Title","Typography","Footer","Layout","Content","Header","useEffect","toFixed","level","style","textAlign","getMockData","type","surveys","id","tagline","title","survey","questions","options","j","useFetch","option","data","loading","error","state","setState","a","result","console","log","prevState","fetchData","SurveyCard","to","bordered","width","Home","tip","map","key","Question","onChange","questionId","Group","size","index","value","Survey","useParams","questionIndex","setQuestionIndex","setValue","userAnswers","useRef","setSurveyState","history","useHistory","postSurveyData","completion","current","status","completed","push","err","storeUserAnswers","split","ans","question_id","handleChange","e","target","handleSubmit","event","preventDefault","useSurveySubmit","length","question","onSubmit","htmlType","shape","disabled","ResultCard","subTitle","extra","Result","props","render","App","setSurvey","useCallback","currentState","useSurveyContext","Provider","path","exact","Boolean","window","location","hostname","match","createServer","get","users","name","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d55e5e4d.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nexport const surveyContext = createContext(null);\n","import React from \"react\";\nimport { Progress } from \"antd\";\nimport \"./ProgressBar.scss\";\n\nconst ProgressBar = ({ currentStep, totalQuestion, progress }) => {\n  return (\n    <div className=\"progressWrapper\">\n      <span className=\"progress-info\">\n        {currentStep - 1} of {totalQuestion} answered\n      </span>\n      <div className=\"progress-bar\">\n        <Progress percent={parseInt(progress)} />\n      </div>\n    </div>\n  );\n};\n\nexport default ProgressBar;\n","import React, { useState, useEffect } from \"react\";\nimport { Typography, Layout } from \"antd\";\nimport { surveyContext } from \"state/surveyContext\";\nimport ProgressBar from \"components/ProgressBar/ProgressBar\";\nimport \"./AppLayout.scss\";\n\nconst AppLayout = ({ children }) => {\n  const [progress, setProgress] = useState(0);\n  const {\n    surveyState: { totalQuestion, currentStep, inProgress }\n  } = React.useContext(surveyContext);\n\n  const { Title } = Typography;\n  const { Footer, Content, Header } = Layout;\n\n  useEffect(() => {\n    const progressPercent = ((currentStep - 1) / totalQuestion) * 100;\n    setProgress(progressPercent.toFixed(0));\n  }, [currentStep, totalQuestion]);\n\n  return (\n    <Layout className=\"layout\">\n      <Header className=\"header\">\n        <Title level={1}>Survey</Title>\n      </Header>\n      <Content className=\"content\">\n        <div className=\"frame-header\" />\n        {children}\n        <div className=\"frame-footer\">\n          {inProgress && (\n            <ProgressBar\n              currentStep={currentStep}\n              totalQuestion={totalQuestion}\n              progress={progress}\n            />\n          )}\n        </div>\n      </Content>\n      <Footer style={{ textAlign: \"center\" }}>Created by Jobe</Footer>\n    </Layout>\n  );\n};\n\nexport default AppLayout;\n","export const getData = async (url) => {\n  const response = await fetch(url);\n  return await response.json();\n};\n\nexport const getMockData = (type) => {\n  debugger;\n  switch (type) {\n    case \"surveys\":\n      return {\n        surveys: [\n          { id: 1, tagline: \"Personal\", title: \"Survey about you\" },\n          { id: 1, tagline: \"Personal\", title: \"Survey about you\" },\n          { id: 1, tagline: \"Personal\", title: \"Survey about you\" },\n          { id: 1, tagline: \"Personal\", title: \"Survey about you\" },\n          { id: 1, tagline: \"Personal\", title: \"Survey about you\" },\n          { id: 1, tagline: \"Personal\", title: \"Survey about you\" },\n        ],\n      };\n    case \"detail\":\n      return {\n        survey: {\n          title: \"This is title\",\n          questions: [\n            {\n              title: \"What is your name?\",\n              options: [\"Alex\", \"Rob\", \"Bob\"],\n              id: \"1\",\n            },\n            {\n              title: \"What is your age?\",\n              options: [\"1\", \"2\", \"3\"],\n              id: \"2\",\n            },\n            {\n              title: \"What is your height?\",\n              options: [\"1.5\", \"2.5\", \"3.5\"],\n              id: \"3\",\n            },\n            {\n              title: \"When will you change?\",\n              options: [\"today\", \"tomorrow\", \"day after tomorrow\"],\n              id: \"4\",\n            },\n          ],\n        },\n      };\n\n    default:\n      return { j: \"\" };\n  }\n};\n\nexport const postData = async (url, payload) => {\n  const response = await fetch(url, {\n    method: \"post\",\n    body: payload,\n  });\n  return await response.json();\n};\n","import { useEffect, useState } from \"react\";\nimport { getApiUrl } from \"helpers/getApiUrl\";\nimport { getMockData } from \"services/api\";\n\nconst useFetch = (type, option = {}) => {\n  const [state, setState] = useState({\n    data: null,\n    loading: true,\n    error: false,\n  });\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        debugger;\n        const result = getMockData(type);\n        console.log(result);\n\n        setState((prevState) => {\n          return { ...prevState, data: result, loading: false };\n        });\n      } catch (error) {\n        setState((prevState) => {\n          return { error: true, loading: false, ...prevState };\n        });\n      }\n    };\n    fetchData();\n  }, [type, option.id]);\n\n  return { ...state };\n};\n\nexport default useFetch;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./SurveyCard.scss\";\nimport { Card } from \"antd\";\n\nconst SurveyCard = ({ id, title, tagline }) => {\n  return (\n    <Link to={`/survey/${id}`}>\n      <Card\n        className=\"link\"\n        title={title}\n        bordered={false}\n        style={{ width: 300 }}\n      >\n        <p>{tagline}</p>\n      </Card>\n    </Link>\n  );\n};\n\nexport default SurveyCard;\n","import React from \"react\";\nimport { Spin } from \"antd\";\nimport useFetch from \"hooks/useFetch\";\nimport SurveyCard from \"components/SurveyCard/SurveyCard\";\n\nconst Home = () => {\n  const { data, loading } = useFetch(\"surveys\");\n\n  if (loading) {\n    return <Spin tip=\"Loading...\"></Spin>;\n  }\n  return (\n    <>\n      {data.surveys.map(({ id, title, tagline }) => (\n        <SurveyCard key={id} id={id} title={title} tagline={tagline} />\n      ))}\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Radio, Typography } from \"antd\";\nimport \"./Question.scss\";\n\nconst Question = ({ title, options, onChange, questionId }) => {\n  const { Title } = Typography;\n\n  return (\n    <>\n      <Title className=\"question-title\" level={2}>\n        {title}\n      </Title>\n      <Radio.Group onChange={onChange} size=\"large\">\n        {options.map((option, index) => (\n          <Radio\n            key={index}\n            className=\"radioStyle\"\n            value={`${questionId}##${option}`}\n          >\n            {option}\n          </Radio>\n        ))}\n      </Radio.Group>\n    </>\n  );\n};\n\nexport default Question;\n","import React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Typography, Button, Spin, Layout, Divider } from \"antd\";\n\nimport { useSurveySubmit } from \"hooks/useSurveySubmit\";\nimport useFetch from \"hooks/useFetch\";\nimport Question from \"components/Question/Question\";\nimport \"./Survey.scss\";\n\nexport default function Survey() {\n  let { id } = useParams();\n  const { data, loading } = useFetch(\"detail\", { id });\n\n  const {\n    questionIndex,\n    setSurveyState,\n    handleSubmit,\n    handleChange,\n    value,\n  } = useSurveySubmit();\n\n  useEffect(() => {\n    if (!loading) {\n      setSurveyState((prevState) => ({\n        ...prevState,\n        totalQuestion: data.survey.questions.length,\n        currentStep: 1,\n        inProgress: true,\n      }));\n    }\n  }, [data, loading, setSurveyState]);\n\n  if (loading) {\n    return <Spin tip=\"Loading...\" size=\"large\"></Spin>;\n  }\n\n  const {\n    title,\n    questions: {\n      [questionIndex]: { title: question, options, id: questionId },\n    },\n  } = data.survey;\n\n  const { Title } = Typography;\n  const { Content } = Layout;\n\n  return (\n    <div className=\"survey\">\n      <Divider>\n        <Title level={1}>{title}</Title>\n      </Divider>\n\n      <Content>\n        <form onSubmit={handleSubmit}>\n          <Question\n            title={question}\n            options={options}\n            onChange={handleChange}\n            questionId={questionId}\n          />\n          <div className=\"button-holder\">\n            <Button\n              type=\"primary\"\n              htmlType=\"submit\"\n              shape=\"round\"\n              size=\"default\"\n              disabled={value ? false : true}\n            >\n              Next\n            </Button>\n          </div>\n        </form>\n      </Content>\n    </div>\n  );\n}\n","import { useRef, useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { surveyContext } from \"state/surveyContext\";\nimport { postData } from \"services/api\";\nimport { getApiUrl } from \"helpers/getApiUrl\";\n\nexport const useSurveySubmit = () => {\n  const [questionIndex, setQuestionIndex] = useState(0);\n  const [value, setValue] = useState(\"\");\n  const userAnswers = useRef([]);\n  const {\n    surveyState: { totalQuestion, currentStep },\n    setSurveyState,\n  } = useContext(surveyContext);\n  let history = useHistory();\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    if (event) {\n      event.preventDefault();\n\n      // update survey state data.\n      setSurveyState((prevState) => ({\n        ...prevState,\n        currentStep: prevState.currentStep + 1,\n      }));\n\n      // store user selected answers in array (useRef)\n      storeUserAnswers();\n\n      // post data if user answered all questions.\n      if (totalQuestion === currentStep) {\n        postSurveyData();\n        return;\n      }\n      // question index increment to render next question\n      setQuestionIndex((prevState) => prevState + 1);\n\n      // clear current answer\n      setValue(\"\");\n    }\n  };\n\n  const postSurveyData = async () => {\n    const completion = { completion: userAnswers.current };\n    try {\n      // const result = await postData(getApiUrl(\"submit\"), completion);\n      const result = { status: \"ok\" };\n\n      if (result.status === \"ok\") {\n        // Update the state after submit\n        setSurveyState((prevState) => ({\n          ...prevState,\n          completed: true,\n          inProgress: false,\n        }));\n        history.push(\"/result\");\n      }\n    } catch (err) {\n      console.log(err);\n      history.push(\"/home\");\n    }\n  };\n\n  const storeUserAnswers = () => {\n    var [questionId, selectedAns] = value.split(\"##\");\n    const ans = {\n      question_id: questionId,\n      value: selectedAns,\n    };\n    userAnswers.current.push(ans);\n  };\n\n  return {\n    questionIndex,\n    handleChange,\n    setSurveyState,\n    handleSubmit,\n    value,\n  };\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Result, Button } from \"antd\";\n\nconst ResultCard = () => {\n  return (\n    <Result\n      status=\"success\"\n      title=\"You have successfully completed the survey!\"\n      subTitle=\"Thanks for answering the survey!\"\n      extra={[\n        <Link to=\"/\" key=\"link\">\n          <Button type=\"primary\" shape=\"round\" size=\"default\">\n            Back to survey\n          </Button>\n        </Link>\n      ]}\n    />\n  );\n};\n\nexport default ResultCard;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport ResultCard from \"components/ResultCard/ResultCard\";\nimport { surveyContext } from \"state/surveyContext\";\n\nconst Result = props => {\n  const {\n    surveyState: { completed }\n  } = React.useContext(surveyContext);\n\n  return (\n    <Route render={() => (completed ? <ResultCard /> : <Redirect to=\"/\" />)} />\n  );\n};\n\nexport default Result;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"antd/dist/antd.css\";\nimport AppLayout from \"./components/AppLayout/AppLayout\";\nimport Home from \"./pages/Home/Home\";\nimport Survey from \"./pages/Survey/Survey\";\nimport Result from \"./pages/Result/Result\";\nimport { surveyContext } from \"./state/surveyContext\";\nimport { useSurveyContext } from \"./hooks/useSurveyContext\";\n\nconst App = () => {\n  const surveyState = useSurveyContext();\n\n  return (\n    <div className=\"App\">\n      <surveyContext.Provider value={surveyState}>\n        <Router>\n          <AppLayout>\n            <Switch>\n              <Route path=\"/survey/:id\">\n                <Survey />\n              </Route>\n              <Route exact path=\"/result\">\n                <Result />\n              </Route>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n            </Switch>\n          </AppLayout>\n        </Router>\n      </surveyContext.Provider>\n    </div>\n  );\n};\n\nexport default App;\n","import { useState, useCallback } from \"react\";\n\nexport const useSurveyContext = () => {\n  const [surveyState, setSurvey] = useState({\n    completed: false,\n    totalQuestion: 0,\n    currentStep: 0,\n    inProgress: false\n  });\n\n  const setSurveyState = useCallback(currentState => {\n    setSurvey(currentState);\n  }, []);\n\n  return {\n    surveyState,\n    setSurveyState\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createServer } from \"miragejs\";\n\nlet server = createServer();\nserver.get(\"/api/users\", { users: [{ id: 1, name: \"Bob\" }] });\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}